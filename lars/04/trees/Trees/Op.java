//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.3.0.1 
// See <a href="https://javaee.github.io/jaxb-v2/">https://javaee.github.io/jaxb-v2/</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2024.12.06 at 06:58:40 PM UTC 
//


package Trees;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElementRef;
import javax.xml.bind.annotation.XmlElementRefs;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for Op complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="Op"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence maxOccurs="2" minOccurs="2"&gt;
 *         &lt;choice&gt;
 *           &lt;element name="Add" type="{}Op"/&gt;
 *           &lt;element name="Sub" type="{}Op"/&gt;
 *           &lt;element name="Mul" type="{}Op"/&gt;
 *           &lt;element name="Div" type="{}Op"/&gt;
 *           &lt;element name="Num" type="{http://www.w3.org/2001/XMLSchema}long"/&gt;
 *         &lt;/choice&gt;
 *         &lt;choice&gt;
 *           &lt;element name="Add" type="{}Op"/&gt;
 *           &lt;element name="Sub" type="{}Op"/&gt;
 *           &lt;element name="Mul" type="{}Op"/&gt;
 *           &lt;element name="Div" type="{}Op"/&gt;
 *           &lt;element name="Num" type="{http://www.w3.org/2001/XMLSchema}long"/&gt;
 *         &lt;/choice&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Op", propOrder = {
    "addOrSubOrMul"
})
public class Op {

    @XmlElementRefs({
        @XmlElementRef(name = "Add", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "Sub", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "Mul", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "Div", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "Num", type = JAXBElement.class, required = false)
    })
    protected List<JAXBElement<?>> addOrSubOrMul;

    /**
     * Gets the value of the addOrSubOrMul property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the addOrSubOrMul property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getAddOrSubOrMul().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link JAXBElement }{@code <}{@link Op }{@code >}
     * {@link JAXBElement }{@code <}{@link Op }{@code >}
     * {@link JAXBElement }{@code <}{@link Op }{@code >}
     * {@link JAXBElement }{@code <}{@link Op }{@code >}
     * {@link JAXBElement }{@code <}{@link Long }{@code >}
     * 
     * 
     */
    public List<JAXBElement<?>> getAddOrSubOrMul() {
        if (addOrSubOrMul == null) {
            addOrSubOrMul = new ArrayList<JAXBElement<?>>();
        }
        return this.addOrSubOrMul;
    }

    public boolean isFirstChildLong() {
        JAXBElement<?> firstChild = this.getAddOrSubOrMul().get(0);
        return firstChild.getDeclaredType().getSimpleName().equals("Long");
    }
    public boolean isFirstChildOp() {
        return !isFirstChildLong();
    }
    public boolean isSecondChildLong() {
        JAXBElement<?> secondChild = this.getAddOrSubOrMul().get(1);
        return secondChild.getDeclaredType().getSimpleName().equals("Long");
    }
    public boolean isSecondChildOp() {
        return !isSecondChildLong();
    }

}
